1. Start
2. User submits email via POST request.
3. Validate the email (check if email is empty).
4. Check if the email exists in the database:
   - Query database: SELECT * FROM users WHERE email = :email
   - If email does not exist:
     - Return error: "Email address not found."
   - If email exists:
     - Generate unique token using random_bytes.
     - Set token expiry time (e.g., 10 minutes from now).
     - Insert token and expiry into password_resets table.
     - Send email using PHPMailer with reset link (includes token).
     - Display message: "A password reset email has been sent."
     - Redirect user to login page after a delay (optional).
5. Handle errors:
   - If an error occurs (email sending fails), return an error message: "Mailer Error: [message]."
6. End



Reset Password flow:


1. Start
2. User accesses the reset password page with a token in the URL.
3. Validate token:
   - If token is missing, return error: "Invalid request."
   - Query database for token: SELECT * FROM password_resets WHERE token = :token
   - If token does not exist, return error: "Invalid token."
4. Validate token expiry:
   - Check if token is expired by comparing current time with token's expiry time.
   - If expired, return error: "This link has expired."
5. User submits new password and confirms password.
   - Check if new password matches confirm password.
   - If passwords do not match, return error: "Passwords do not match."
6. Hash the new password using password_hash().
7. Update user's password in the database: UPDATE users SET password = :new_password WHERE email = :email.
8. Delete the token from the password_resets table.
9. Display success message: "Password successfully reset. You can now login."
10. Handle errors:
    - If any error occurs during the process, return error message: "Error: [message]."
11. End
